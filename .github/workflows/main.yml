name: Flutter Release Build

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build Flutter Release Bundle
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.6'  # Updated to fix Dart SDK version issue
      - name: Setup Java (Temurin 17)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Decode keystore and write file
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        run: |
          mkdir -p android/keystore
          if [ -z "${KEYSTORE_BASE64}" ]; then
            echo "ERROR: KEYSTORE_BASE64 is empty" >&2
            exit 1
          fi
          echo "$KEYSTORE_BASE64" | base64 --decode > android/keystore/release-key.jks
          chmod 600 android/keystore/release-key.jks

      - name: Write android/key.properties
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          cat > android/key.properties <<EOF
          storePassword=${KEYSTORE_PASSWORD}
          keyPassword=${KEY_PASSWORD}
          keyAlias=${KEY_ALIAS}
          storeFile=keystore/release-key.jks
          EOF

      - name: Install Dependencies
        run: flutter pub get

      - name: Clean previous builds
        run: flutter clean

      - name: Build Android Release App Bundle (.aab)
        run: flutter build appbundle --release

      # Install Firebase CLI
      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Distribute AAB to Firebase App Distribution
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
          FIREBASE_GROUPS: ${{ secrets.FIREBASE_GROUPS }}
        run: |
          if [ -z "$FIREBASE_TOKEN" ] || [ -z "$FIREBASE_APP_ID" ]; then
            echo "FIREBASE_TOKEN and FIREBASE_APP_ID must be set as repository secrets" >&2
            exit 1
          fi
          echo "Distributing AAB to Firebase App Distribution..."
          # Build path
          AAB_PATH=build/app/outputs/bundle/release/app-release.aab
          if [ ! -f "$AAB_PATH" ]; then
            echo "AAB not found at $AAB_PATH" >&2
            exit 1
          fi
          # If FIREBASE_GROUPS is set, pass --groups, otherwise skip
          if [ -n "$FIREBASE_GROUPS" ]; then
            firebase appdistribution:distribute "$AAB_PATH" --app "$FIREBASE_APP_ID" --groups "$FIREBASE_GROUPS" --token "$FIREBASE_TOKEN" --release-notes "CI build $GITHUB_SHA"
          else
            firebase appdistribution:distribute "$AAB_PATH" --app "$FIREBASE_APP_ID" --token "$FIREBASE_TOKEN" --release-notes "CI build $GITHUB_SHA"
          fi

      # Optional: Upload the AAB as an artifact
      - name: Upload .aab Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-aab
          path: build/app/outputs/bundle/release/app-release.aab
